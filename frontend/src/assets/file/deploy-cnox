#!/bin/bash

#
# Copyright 2019 Cloud Defense Authors
#

exit_with_print_usage () {
    echo "Usage: deploy-cnox <clusterName> <licenseKey>"
    exit
}

echo_with_exit() {
   echo "$*"
   exit
}

if [ $# -ne 2 ]; then
    echo "Missing arguments"
    exit_with_print_usage
fi

if [ -z "$1" ]; then
    echo "clusterName empty"
    exit_with_print_usage
fi
export CLUSTER_NAME=$1

if [ -z "$2" ]; then
    echo "licenseKey empty"
    exit_with_print_usage
fi
export LICENSE_KEY=$2



create_kubecreds_secret () {
    echo "preparing kube credential secrets ..."
    KUBE_CREDS_FILE=$(mktemp)
    kubectl config view --raw -o yaml > "${KUBE_CREDS_FILE}"
    kubectl delete secret cnoxkubecreds --wait --ignore-not-found --namespace cnox
    kubectl create secret generic cnoxkubecreds --from-file=cnoxkubecreds="${KUBE_CREDS_FILE}" --namespace cnox
    rm -f "${KUBE_CREDS_FILE}"
}

create_cnox_deployment () {
    echo "cleaning up old cnox deployment (if any) ..."
    kubectl delete service cnoxengine --wait --ignore-not-found --namespace cnox
    kubectl delete deployment cnoxengine --wait --ignore-not-found --namespace cnox
    echo "deploying cnox ..."
    generate_cnoxengine_deployment | kubectl apply -f -
    generate_cnoxengine_service | kubectl apply -f -
}


check_prerequisite () {
    requiredCmds=( curl jq kubectl )
    for cmd in "${requiredCmds[@]}"
    do
        if ! command -v "${cmd}" >> /dev/null
        then
            echo_with_exit "${cmd} command missing. Please install ${cmd} and retry"
        fi
    done
}

stack_post_data() {
  cat << EOF
  {
     "cluster_name" : "$CLUSTER_NAME",
     "cnox_stack" : "call_home",
     "cnox_engine_url" : "",
     "customer_id": "$LICENSE_KEY",
     "license_key": "$LICENSE_KEY",
     "Nodes" : "",
     "Pods" : "0",
     "Services" : "0",
     "monitor_url" : "",
     "scanner_url" :""
  }
EOF
}

create_dashboard_stack() {
    TEMPOUTFILE=$(mktemp)
    TEMPERRFILE=$(mktemp)
    CNOX_CLOUD_SERVICE_URL="http://34.208.221.82:3000/"
    respStatus=$(curl --silent --connect-timeout 10 --write-out "%{http_code}" --output "${TEMPOUTFILE}" --header "Content-Type: application/json" --data "$(stack_post_data)" "${CNOX_CLOUD_SERVICE_URL}" 2> "${TEMPERRFILE}")
    if [ "$respStatus" == "000" ]; then
        cat "${TEMPERRFILE}"
        echo_with_exit "Couldn't reach CNOX license server. Please check your network connection and retry"
    fi
    respMesg=$(jq .message < "${TEMPOUTFILE}" )

    case $respStatus in
    200)
        echo "Successfully validated CNOX license key"
        echo "Deploying CNOX ..."
        ;;
    401)
        case $respMesg in
        '"Customer Not Found"')
            echo_with_exit "Invalid License Key. Please check and retry"
            ;;
        '"Customer Inactive"')
            echo_with_exit "Invalid License Key. Please check and retry"
            ;;
        '"Cluster Already Exists"')
            echo "Cluster already exist. Cleanup (if needed) and re-install cnox"
            ;;
        *)
            echo_with_exit "Failed to validate license key. Message $respMesg"
            ;;
        esac
        ;;
    *)
        echo_with_exit "Failed to validate license key. Code $respStatus"
    esac

    rm -f "$TEMPOUTFILE" "$TEMPERRFILE"
}

create_cnox_config () {
    kubectl delete configmap cnoxengine --ignore-not-found --namespace cnox
    kubectl create configmap cnoxengine --from-literal=clusterName="${CLUSTER_NAME}" --from-literal=licenseKey="${LICENSE_KEY}" --namespace cnox
}

generate_cnoxengine_deployment() {
  cat << CNOXENGINE_DEPLOYMENT_EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cnoxengine
  namespace: cnox
  labels:
    app: cnoxengine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cnoxengine
  template:
    metadata:
      labels:
        app: cnoxengine
    spec:
      containers:
      - name: cnoxengine
        image: clouddefense/cnoxengine:11-03-19-23-32-45
        imagePullPolicy: Always
        command: ["/cnox/bin/engine"]
        ports:
        - containerPort: 8888
        env:
        - name: KUBECONFIG
          value: "/cnox/credentials/cnoxkubecreds"
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cnoxengine
              key: clusterName
        - name: LICENSE_KEY
          valueFrom:
            configMapKeyRef:
              name: cnoxengine
              key: licenseKey
        volumeMounts:
        - name: cnox-kube-creds
          mountPath: "/cnox/credentials"
          readOnly: true
      volumes:
      - name: cnox-kube-creds
        secret:
          secretName: cnoxkubecreds
      restartPolicy: Always
      serviceAccountName: cnox
CNOXENGINE_DEPLOYMENT_EOF
}

generate_cnoxengine_service() {
    cat << CNOXENGINE_SERVICE_EOF
apiVersion: v1
kind: Service
metadata:
  name: cnoxengine
  namespace: cnox
spec:
  type: LoadBalancer
  ports:
  - port: 8888
  selector:
    app: cnoxengine
CNOXENGINE_SERVICE_EOF
}

generate_cnox_serviceaccount() {
  cat << CNOX_SERVICE_ACCOUNT_EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cnox
  namespace: cnox
CNOX_SERVICE_ACCOUNT_EOF
}

generate_cnox_clusterrolebinding() {
  cat << CNOX_CLUSTER_ROLEBINDING_EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cnox
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: cnox
  namespace: cnox
CNOX_CLUSTER_ROLEBINDING_EOF
}

create_cnox_account() {
    echo "preparing cnox account ..."
    CURRENT_CONTEXT=$(kubectl config current-context)
    CURRENT_CLUSTER=$(kubectl config view -o jsonpath="{.contexts[?(@.name == '$CURRENT_CONTEXT')].context.cluster}")
    echo "install cnox on cluster ${CURRENT_CLUSTER} ..."
    kubectl create ns cnox
    generate_cnox_serviceaccount | kubectl apply -f -
    SECRET=$(kubectl get serviceaccount/cnox --namespace=cnox --output=jsonpath="{.secrets[0].name}")
    TOKEN=$(kubectl get secret/${SECRET} --namespace=cnox --output=jsonpath="{.data.token}" | base64 --decode)
    kubectl config set-credentials cnox --token=${TOKEN}
    kubectl config set-context cnox --user=cnox --cluster=${CURRENT_CLUSTER}
    generate_cnox_clusterrolebinding | kubectl apply -f -
    kubectl config use-context cnox
    create_kubecreds_secret
    kubectl config use-context ${CURRENT_CONTEXT}
}

delete_cnox() {
    kubectl delete namespace cnox
    kubectl delete clusterrolebindings.rbac.authorization.k8s.io cnox
}

check_prerequisite
create_cnox_account
create_dashboard_stack
create_cnox_config
create_cnox_deployment

